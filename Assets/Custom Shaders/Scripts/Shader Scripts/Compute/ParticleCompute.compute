/// Compute shader
// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain
#pragma kernel InitParticles
#pragma kernel MoveParticles
#pragma kernel DisplayParticles
#pragma kernel ClearDisplay

struct Particle
{
    float posX;
    float posY;
    float velX;
    float velY;
};

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
int numberOfParticles;
int batchID;
int batchSize;
float initialSpeed;
float verticalAcceleration;
float dt;
float mousePosX;
float mousePosY;
// obstacle
float wallYMin;
float wallYMax;
float wallXMin;
float wallXMax;
float wallThickness;
RWTexture2D<float4> Result;
RWStructuredBuffer<Particle> particleBuffer;

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    // TODO: insert actual code here!

    Result[id.xy] = float4(id.x / 1920.0, id.y / 1920.0, 0, 1);
}

[numthreads(64, 1, 1)]
void InitParticles(uint3 id : SV_DispatchThreadID)
{
    //particleBuffer[id.x + batchID].posX = 1920.0 / 2;
    particleBuffer[id.x + batchID].posX = mousePosX;
    particleBuffer[id.x + batchID].posY = mousePosY;
    float theta = 2 * 3.14 * id.x / batchSize;
    particleBuffer[id.x + batchID].velX = initialSpeed * cos(theta);
    particleBuffer[id.x + batchID].velY = initialSpeed * sin(theta);
}

[numthreads(64, 1, 1)]
void MoveParticles(uint3 id : SV_DispatchThreadID)
{

	particleBuffer[id.x].velY += verticalAcceleration * dt;
    particleBuffer[id.x].posX += particleBuffer[id.x].velX * dt;
    particleBuffer[id.x].posY += particleBuffer[id.x].velY * dt;

	// outer boundary
	if ((particleBuffer[id.x].posY <= 0 && particleBuffer[id.x].velY < 0) ||
		(particleBuffer[id.x].posY >= 1920.0 && particleBuffer[id.x].velY > 0))
	{
		particleBuffer[id.x].velY *= -1;
	}
	if ((particleBuffer[id.x].posX >= 1920.0 && particleBuffer[id.x].velX > 0) ||
		(particleBuffer[id.x].posX <= 0 && particleBuffer[id.x].velX < 0))
	{
		particleBuffer[id.x].velX *= -1;
	}

	// inner boundary
	if (particleBuffer[id.x].posX >= wallXMin && particleBuffer[id.x].posX <= wallXMax &&
		particleBuffer[id.x].posY >= wallYMin && particleBuffer[id.x].posY <= wallYMax)
	{
		// top & bottom
		if (particleBuffer[id.x].posX > wallXMin + wallThickness && particleBuffer[id.x].posX < wallXMax - wallThickness)
		{
			particleBuffer[id.x].velY *= -1;
		}
		
		// left & right
		if (particleBuffer[id.x].posY > wallYMin + wallThickness && particleBuffer[id.x].posY < wallYMax - wallThickness)
		{
			particleBuffer[id.x].velX *= -1;
		}

		// corners
		if ((particleBuffer[id.x].posY - wallYMin <= wallThickness && particleBuffer[id.x].posX - wallXMin <= wallThickness) ||
			(particleBuffer[id.x].posY - wallYMin <= wallThickness && wallXMax - particleBuffer[id.x].posX <= wallThickness) ||
			(wallYMax - particleBuffer[id.x].posY <= wallThickness && wallXMax - particleBuffer[id.x].posX <= wallThickness) ||
			(wallYMax - particleBuffer[id.x].posY <= wallThickness && particleBuffer[id.x].posX - wallXMin <= wallThickness))
		{
			particleBuffer[id.x].velX *= -1;
			particleBuffer[id.x].velY *= -1;
		}
	}
}

[numthreads(64, 1, 1)]
void DisplayParticles(uint3 id : SV_DispatchThreadID)
{
    Result[float2(particleBuffer[id.x].posX, particleBuffer[id.x].posY)] = float4(1, 0, 0, 1);
}

[numthreads(8, 8, 1)]
void ClearDisplay(uint3 id : SV_DispatchThreadID)
{
    Result[id.xy] = float4(0, 0, 0, 1);
}